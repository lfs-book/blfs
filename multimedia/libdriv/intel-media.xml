<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

<!--<!ENTITY intel-media-driver-version                "23.2.4">-->

  <!ENTITY intel-media-download-http "https://github.com/lfs-book/intel-media-driver/archive/v&intel-media-version;/intel-media-driver-&intel-media-version;.tar.gz">
  <!ENTITY intel-media-download-ftp  " ">
  <!ENTITY intel-media-md5sum        "3c90e965a00e2f4fa1c3d3d409bb47e5">
  <!ENTITY intel-media-size          "26 MB">
  <!ENTITY intel-media-buildsize     "1.4 GB (211 MB installed with a single GPU model)">
  <!ENTITY intel-media-time          "3.1 SBU (with parallelism=4 and a single GPU model)">

]>

  <sect1 id="intel-media-driver" xreflabel="intel-media-driver-&intel-media-version;">
  <?dbhtml filename="intel-media-driver.html"?>

    <title>intel-media-driver-&intel-media-version;</title>

    <indexterm zone="intel-media-driver">
      <primary sortas="a-intel-media-driver">intel-media-driver</primary>
    </indexterm>

    <sect2 role="package">
      <title>Introduction to intel-media-driver</title>

      <para>
        The <application>intel-media-driver</application> package provides a
        VA API driver for Intel GPUs that are provided with Broadwell CPUs and
        higher. This includes support for a variety of codecs.
      </para>

      &lfs123_checked;

      <bridgehead renderas="sect3">Package Information</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download (HTTP): <ulink url="&intel-media-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download (FTP): <ulink url="&intel-media-download-ftp;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &intel-media-md5sum;
          </para>
        </listitem>
        <listitem>
          <para>
            Download size: &intel-media-size;
          </para>
        </listitem>
        <listitem>
          <para>
            Estimated disk space required: &intel-media-buildsize;
          </para>
        </listitem>
        <listitem>
          <para>
            Estimated build time: &intel-media-time;
          </para>
        </listitem>
      </itemizedlist>

      &github-lfs-fork;
<!--
      <bridgehead renderas="sect2">Additional Downloads</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Required patch:
            <ulink url="&patch-root;/intel-media-&intel-media-version;-gcc14_fixes-1.patch"/>
          </para>
        </listitem>
      </itemizedlist>
-->
      <bridgehead renderas="sect3">intel-media-driver Dependencies</bridgehead>

      <bridgehead renderas="sect4">Required</bridgehead>
      <para role="required">
        <xref linkend="cmake"/>,
        <xref linkend="gmmlib"/>,
        <xref linkend="libva"/>, and
        <xref linkend="xorg-env"/>
      </para>

    </sect2>

    <sect2 role="kernel" id='intel-media-kernel'>
      <title>Kernel Configuration</title>

      <para>
        Enable the following options in the kernel configuration.
        Recompile the kernel if necessary:
      </para>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="intel-media-kernel.xml"/>

      <indexterm zone="intel-media-driver intel-media-kernel">
        <primary sortas="d-intel-media-driver">intel-media-driver</primary>
      </indexterm>
    </sect2>

    <!-- TODO: It's said Gen9+ (Skylake or later) may need some firmware files. -->

    <sect2 role="installation">
      <title>Installation of intel-media-driver</title>

      <note>
        <para>
          This package takes a long time to build because it compiles code
          specific to each individual generation of Intel GPUs and for a
          variety of media codecs.
        </para>

        <!-- This reduce the size of iHD_drv_video.so from 319M to 157M
             for me.  -->
        <!-- It seems ARL depends on MTL.  We need to review once an Arrow
             Lake CPU is launched.  -->
        <!-- Support for ARL is completely broken, needs to be turned off to 
             complete the build -->
        <para>
          If you know the model of your Intel GPU, you can pass the
          <option>-D{GEN{8,9,11,12},MTL,ARL,LNL,BMG,XE2_HPG}=OFF</option> option
          to the <command>cmake</command> command but leaving the option for your
          GPU out.  Note that the <quote>GEN</quote> number here is the
          generation of the GPU, not the CPU.  For example, with an Intel
          Core i7-1065G7 CPU shipping a 11th-generation Intel GPU, the
          <option>-D{GEN{8,9,12},MTL,ARL,LNG,BMG,XE2_HPG}=OFF</option> option can
          be used so the code specific to the other generations of Intel GPUs
          won't be built.
        </para>

        <para>
          To determine the model of the Intel GPU, install
          <xref linkend='pciutils'/> and run
          <command>lspci -nn | grep -Ei 'VGA|DISPLAY'</command> first.
          It will output some information about the GPU, including
          the PCI vendor ID (<literal>8086</literal> for Intel) and the
          PCI device ID.  For example, with an Intel Core i5-11300H CPU, the
          output is <literal>8086:9a49</literal>.  Now searching for the
          registration of this device ID in the intel-media-driver source tree:
        </para>
        <screen role='nodump'><userinput>grep -ri 'RegisterDevice(0x<replaceable>9a49</replaceable>'</userinput></screen>
        <para>
          And determine the GPU model from the file name containing the
          registration.  For the example above, the file name is
          <filename>media_sysinfo_g12.cpp</filename>, indicating the model
          is <literal>GEN12</literal>.
        </para>
      </note>
<!--
      <para>
        First, fix a few build failures with GCC-14:
      </para>

 <screen><userinput remap="pre">patch -Np1 -i ../intel-media-&intel-media-version;-gcc14_fixes-1.patch</userinput></screen>
-->
      <para>
        Install <application>intel-media-driver</application> by running the
        following commands:
      </para>

<screen><userinput>mkdir build &amp;&amp;
cd    build &amp;&amp;

cmake -D CMAKE_INSTALL_PREFIX=$XORG_PREFIX \
      -D INSTALL_DRIVER_SYSCONF=OFF        \
      -D BUILD_TYPE=Release                \
      -G Ninja                             \
      -W no-dev ..                         &amp;&amp;
ninja</userinput></screen>


      <para>
        This package does not come with a test suite.
      </para>

      <para>
        Now, as the <systemitem class="username">root</systemitem> user:
      </para>

<screen role="root"><userinput>ninja install</userinput></screen>

    </sect2>

    <!-- As of Oct 1 2023, the build is broken if MTL and ARL are turned on
         hopefully this is fixed by the time they launch, in which 
         case we can remove the option and this section [rahul] -->
    <!-- As of October 31st, 2023, the build seems to be functional again! This
         is with version 23.4.0. [renodr]
    <sect2 role="commands">
      <title>Command Explanations</title>
       
      <para>
        <parameter>-D{MTL,ARL}=OFF</parameter>: As of October 2023,
        Meteor Lake and Arrow Lake iGPU support is broken but still
        in intel-media. The build fails if support for either iGPU
        is turned on. Since both of these have not been officially
        released yet, it is safe to turn support for them off.
      </para>

     </sect2> 
    -->

    <sect2 role="content">
      <title>Contents</title>

      <segmentedlist>
        <segtitle>Installed Programs</segtitle>
        <segtitle>Installed Libraries</segtitle>
        <segtitle>Installed Drivers</segtitle>
        <segtitle>Installed Directories</segtitle>

        <seglistitem>
          <seg>
            None
          </seg>
          <seg>
            libigfxcmrt.so
          </seg>
          <seg>
            iHD_drv_video.so
          </seg>
          <seg>
            /usr/include/igfxcmrt
          </seg>
        </seglistitem>
      </segmentedlist>

      <variablelist>
        <bridgehead renderas="sect2">Short Descriptions</bridgehead>
        <?dbfo list-presentation="list"?>
        <?dbhtml list-presentation="table"?>

        <varlistentry id="libigfxcmrt">
          <term><filename class="libraryfile">libigfxcmrt.so</filename></term>
          <listitem>
            <para>
              provides API functions which allow running GPU kernels on the
              render engine
            </para>
            <indexterm zone="intel-media-driver libigfxcmrt">
              <primary sortas="c-libigfxcmrt">libigfxcmrt.so</primary>
            </indexterm>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

  </sect1>
