<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY mesa-download-http "https://mesa.freedesktop.org/archive/mesa-&mesa-version;.tar.xz">
  <!ENTITY mesa-download-ftp  " ">
  <!ENTITY mesa-md5sum        "42502c44e1e3e9ea9700c8c4e50b0f7c">
  <!ENTITY mesa-size          "45 MB">
  <!ENTITY mesa-buildsize     "1.2 GB (with docs, add 573 MB for tests)">
  <!ENTITY mesa-time          "3.3 SBU (with docs; add 1.2 SBU for tests; both with parallelism=4)">
]>

<sect1 id="mesa" xreflabel="Mesa-&mesa-version;">
  <?dbhtml filename="mesa.html"?>

  <title>Mesa-&mesa-version;</title>

  <indexterm zone="mesa">
    <primary sortas="a-Mesa">Mesa</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to Mesa</title>

    <para>
      <application>Mesa</application> is an OpenGL compatible 3D graphics
      library.
    </para>

    <note>
      <para>
        <application>Mesa</application> is updated relatively often. You may
        want to use the latest available &mesa-major-minor;.x mesa version.
      </para>
    </note>

    &lfs123_checked;

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Download (HTTP): <ulink url="&mesa-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&mesa-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &mesa-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &mesa-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &mesa-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &mesa-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
    <!-- 9 Apr 23.  Change to unversioned patch since it never changes. -->
      <listitem>
        <para>
          Recommended patch:
          <ulink url="&patch-root;/mesa-add_xdemos-4.patch"/>
          (installs 2 demo programs for testing Mesa - not needed if you
          install the <ulink url="https://archive.mesa3d.org/demos/">
          mesa-demos</ulink> package)
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Mesa Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required</bridgehead>
    <para role="required">
      <xref linkend="xorg7-lib"/>,
      <xref linkend="libdrm"/>,
      <xref linkend="Mako"/>, and
      <xref linkend="PyYAML"/>
    </para>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">

      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <xref linkend="glslang"/> (required for Vulkan support)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="libva"/> (to provide VA-API support for some
            gallium drivers. Note that there is a circular dependency. 
            You must build <application>libva</application> first without 
            mesa's EGL and GLX support, install this package, and rebuild 
            <application>libva</application>)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="libvdpau"/> (to build VDPAU drivers)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="llvm"/> (required for the llvmpipe, r300, r600,
            and radeonsi drivers)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="wayland-protocols"/> (required for
              <xref role="nodep" linkend='plasma-build'/>,
              GNOME, and recommended for 
              <xref role="nodep" linkend='gtk3'/>)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="libclc"/> (required for the Intel iris
            gallium driver)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="vulkan-loader"/> (required for Vulkan support)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="ply"/> (required for the Intel vulkan driver)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="cbindgen"/>,
            <xref linkend="make-ca"/>, and
            <xref linkend="rust-bindgen"/>
            (required for the Nouveau Vulkan driver)
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <note>
      <para>
        An Internet connection is needed for building the Nouveau Vulkan
        driver.  The system certificate store may need to be set up with
        <xref role='recommended' linkend='make-ca'/> before building this
        package.
      </para>
    </note>

    <note>
      <para>
        <emphasis role="bold">Choosing Mesa Drivers</emphasis>
      </para>

      <para>
        In the instructions below, all the available drivers are built.  That
        will almost always work.  However, it is not efficient.  Depending on
        your video hardware, you probably need only specific drivers.
      </para>

      <para>
        The first thing you need to know is which type of video device you
        have.  In some cases it is built into the CPU.  In others it is a
        separate PCI card.  In either case you can tell what video hardware you
        have by installing <xref linkend='pciutils'/> and running:
      </para>

      <screen role='nodump'><userinput>lspci | grep VGA</userinput></screen>

      <para>
        The video device is most likely one of three families: AMD, Intel, or
        NVIDIA.  See the Command Explanations for
        <parameter>-D gallium-drivers=auto</parameter> below to
        see what options are available for your specific video hardware (or
        emulated video hardware).  You should probably add the softpipe or
        llvmpipe option as a backup driver.
      </para>

      <para>
        For 'platforms' you can select x11 and/or wayland.  Note that in BLFS
        currently only Gnome and KDE can use wayland.  If you are not going to 
        use one of those desktop environments then you probably only want x11.
      </para>

      <para>
        For 'vulkan-drivers' you may want to limit the selection to your
        current hardware.  These drivers are used by some specific applications.
        
        For example, ffmpeg (including ffplay) will use Vulkan instead of
        OpenGL for rendering video on the GPU. If you do not want to do this
        you may or may not want to install them.
        See the Command Explanations for
        <parameter>-D vulkan-drivers=auto</parameter> below to
        see what options are available for your specific video hardware (or
        emulated video hardware).  You should probably add the swrast option
        as a backup driver unless you don't need Vulkan at all.
      </para> 
    </note>

    <bridgehead renderas="sect4">Optional</bridgehead>
    <para role="optional">
      <xref linkend="libgcrypt"/>,
      <xref linkend="libunwind"/>,
      <xref linkend="lm_sensors"/>, <!-- for libsensors according to Meson -->
      <xref linkend="nettle"/>,
      <xref linkend="valgrind"/>,
      <ulink url="https://archive.mesa3d.org/demos/">mesa-demos</ulink>
      (provides more than 300 extra demos to test
      <application>Mesa</application>; this includes the same programs added by
      the patch above),
      <ulink url="https://omxil.sourceforge.net/">Bellagio OpenMAX Integration
      Layer</ulink> (for mobile platforms), and
      <!--<ulink url="https://github.com/KhronosGroup/glslang">glslang</ulink>
      (for vulkan drivers),-->
      <ulink url="https://github.com/tizonia/tizonia-openmax-il/wiki/Tizonia-OpenMAX-IL/">
      libtizonia</ulink>,
      <!-- <ulink url="https://github.com/KhronosGroup/Vulkan-Loader">Vulkan-Loader</ulink> -->
    </para>
<!--
    <note>
      <para>
        The instructions below assume that
        <application>LLVM</application> with the r600/amdgpu and host backends
        and run-time type information (RTTI - needed for nouveau) are installed.
        You will need to modify the instructions if you
        choose not to install all of these. For an explanation of Gallium3D see
        <ulink url="https://en.wikipedia.org/wiki/Gallium3D"/>.
      </para>
    </note>
-->

  </sect2>

  <sect2 role="kernel" id="mesa-kernel"
         xreflabel='Mesa Kernel Configuration'>
    <title>Kernel Configuration</title>

    <para>
      Enable the following options in the kernel configuration and
      recompile the kernel if necessary:
    </para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="mesa-kernel.xml"/>

    <note>
      <para>
        The corresponding Mesa Gallium3D driver name is provided as the
        comment for the configuration entries.  If you don't know the name
        of the Mesa Gallium3D driver for your GPU, see <xref
        linkend="mesa-gallium-drivers"/> below.
      </para>

      <para>
        <option>CONFIG_DRM_RADEON</option>,
        <option>CONFIG_DRM_AMDGPU</option>,
        <option>CONFIG_DRM_NOUVEAU</option>, and
        <option>CONFIG_DRM_I915</option> may require firmware.
        See <xref linkend='postlfs-firmware'/> for details.
      </para>

      <para>
        Selecting <option>CONFIG_DRM_RADEON</option>,
        <option>CONFIG_DRM_AMDGPU</option>, or
        <option>CONFIG_DRM_NOUVEAU</option> as
        <quote><literal>y</literal></quote> is not recommended. If it is, any
        required firmware must be built as a part of the kernel image or the
        initramfs for the driver to function correctly.
      </para>

      <para>
        The sub-entries under <option>CONFIG_DRM_AMDGPU</option> are used
        to ensure the AMDGPU kernel driver supports all GPUs using the
        <literal>radeonsi</literal> driver.  They are not needed if you
        won't need <option>CONFIG_DRM_AMDGPU</option> itself. They
        may be unneeded for some GPU models.
      </para>

      <para>
        For <literal>llvmpipe</literal> or <literal>softpipe</literal>,
        <option>CONFIG_DRM_VGEM</option> is required or X clients may fail
        to start with a cryptic message <computeroutput>Error: couldn't get
        an RGB, Double-buffered visual</computeroutput>.  Strictly speaking,
        it can be compiled as a module.  But the module will not be loaded
        automatically, so it's more convenient to build it as a part of the
        kernel image.
      </para>
    </note>
    <indexterm zone="mesa mesa-kernel">
      <primary sortas="d-mesa">mesa</primary>
    </indexterm>
  </sect2>

  <sect2 role="installation">
    <title>Installation of Mesa</title>
    <para>
      If you have downloaded the xdemos patch (needed if testing the Xorg
      installation per BLFS instructions), apply it by running the following
      command:
    </para>

<!--<screen><userinput>patch -Np1 -i ../mesa-&mesa-version;-add_xdemos-1.patch</userinput></screen>-->
<screen><userinput>patch -Np1 -i ../mesa-add_xdemos-4.patch</userinput></screen>
   <!-- Note that freedreno, vc4, and virgl all need special support from
        libdrm - renodr
        For me, libdrm does not mention virgl, but mesa accepts it. AFAICS
        freedreno is for qualcom hardware, libdrm will build for it on suitable
        systems. VC4 is for the Broadcom VC4 used in the raspberry pi - ken -->
<!--
    <note>
      <para>
        The measurements above, and the Contents below, are for a full build.
        Many people will not wish to install drivers they cannot use, so the
        following paragraphs explain how to limit the drivers, and give an
        example which can be be reduced or amended as necessary.
      </para>
    </note>

-->
<!--
    <para>
      The (non-gallium) DRI drivers available in X86 are auto, <emphasis>or
      alternatively a choice from</emphasis> i915, i965, nouveau, r100, r200,
      and swrast. Use 'auto' to build all available DRI drivers, or use an
      empty string (DRI_DRIVERS="") if you wish to only build gallium drivers.
    </para>

    <para>
      The platforms ("window systems") available for X86 linux are x11, wayland,
     drm, and surfaceless. By not specifying anything, the meson
      build-system will build for all these platforms if you have the
      dependencies, identical to if you had specified '-Dplatforms=auto'.
    </para>

    <para>
      Modify the commands below for your desired drivers.  The drivers listed
      below will cover most modern video cards and virtual machines.  For help in
      selecting drivers see <ulink url="https://docs.mesa3d.org/systems.html"/>.
-->
      <!-- these two don't seem to be mentioned in that mesa link -->
<!--
      For intel drivers, specify crocus for i965 gen 4 through to haswell, iris
      for broadwell and later.
    </para>

    <note>
      <para>
        Although the nouveau drivers can be built for both gallium and dri, the
        i915 driver can only be built for one or the other.
      </para>
    </note>

<screen><userinput>GALLIUM_DRV="crocus,i915,iris,nouveau,r600,radeonsi,svga,swrast,virgl"
DRI_DRIVERS="i965,nouveau"</userinput></screen>
-->

    <!-- https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/22021 -->
<!-- No longer needed
    <para>
      Remove two unneeded references to LLVM headers to avoid a build
      failure with LLVM 17 or later:
    </para>

<screen><userinput>sed '/Scalar.h/d;/Utils.h/d' \
    -i src/gallium/auxiliary/gallivm/lp_bld_init.c</userinput></screen>
-->
    <para>
      Install <application>Mesa</application> by running the following
      commands:
    </para>

<screen><userinput>mkdir build &amp;&amp;
cd    build &amp;&amp;

meson setup ..                 \
      --prefix=$XORG_PREFIX    \
      --buildtype=release      \
      -D platforms=x11,wayland \
      -D gallium-drivers=auto  \
      -D vulkan-drivers=auto   \
      -D valgrind=disabled     \
      -D video-codecs=all      \
      -D libunwind=disabled    &amp;&amp;

ninja</userinput></screen>

    <warning>
      <para>
        Please ask your lawyer or remove the
        <parameter>-D video-codecs=all</parameter> option if you will
        distribute the compiled Mesa libraries and drivers to others.
      </para>
    </warning>

    <para>
      To test the results, issue:
      <command>meson configure -D build-tests=true &amp;&amp; ninja test</command>.
    </para>
<!-- All 88 tests passed for me for 22.3.3 [pierre]
     All 90 tests passed for me for 23.1.0 [bdubbs]
     89 Tests passed for me, 1 timeout on 23.1.8 [rahul]
     All 98 tests passed for me for 23.3.1 [bdubbs]
     All 106 tests passed for me for 24.3.1 [zeckma]
     All 104 tests passed for me for 25.0.1 [zeckma]
-->

    <para>
      Now, as the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>ninja install</userinput></screen>

    <para>
      If desired, install the optional documentation by running
      the following commands as the
      <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"
        remap="doc"><userinput>cp -rv ../docs -T /usr/share/doc/mesa-&mesa-version;</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Command Explanations</title>

    <para>
      <parameter>--buildtype=release</parameter>: This switch ensures a
      fully-optimized build, and disables debug assertions which will
      severely slow down the libraries in certain use-cases. Without this
      switch, build sizes can span into the 2 GB range.
    </para>

    <para>
      <anchor id='mesa-gallium-drivers' xreflabel='Mesa Gallium3D Drivers'/>
      <parameter>-D gallium-drivers=auto</parameter>: This parameter
      controls which Gallium3D drivers should be built:

      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>auto</literal> selects all Gallium3D drivers available
            for x86. With a comma-separated list, only a subset of these
            drivers will be built. If you precisely know which drivers you
            need, you can select them explicitly. For example,
            <option>-D gallium-drivers=radeonsi,iris,llvmpipe</option>.
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>r300</literal> (for ATI Radeon 9000 or Radeon X series) 
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>r600</literal> (for AMD/ATI Radeon HD 2000-6000 series)
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>radeonsi</literal> (for AMD Radeon HD 7000 or newer AMD GPU models) 
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>nouveau</literal> (for supported NVIDIA GPUs, they are
             listed as all <quote>3D features</quote> either <quote>DONE</quote> or
             <quote>N/A</quote> in 
             <ulink url='https://nouveau.freedesktop.org/FeatureMatrix.html'>the Nouveau
             status page</ulink>)
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>virgl</literal> (for a QEMU virtual GPU
             with <application>virglrender</application> support; note that BLFS
             <xref linkend='qemu'/> is not built with
             <application>virglrender</application>) 
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>svga</literal> (for a VMWare virtual GPU)
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>llvmpipe</literal> (using CPU for 3D
             rasterization. Note that it's much slower than using a modern
             3D-capable GPU, so it should be only used if the GPU is not supported
             by other drivers)
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>softpipe</literal> (also using CPU for 3D
             rasterization, but slower than llvmpipe. There is not much reason
             to use it unless LLVM is not available)
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>iris</literal> (for Intel GPUs shipped with Broadwell 
             or newer CPUs, or as a dedicated PCIe card)
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>crocus</literal> (for Intel GMA 3000, X3000 series, 
             4000 series, or X4000 series GPUs shipped with chipsets, 
             or Intel HD GPUs shipped with pre-Broadwell CPUs)
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>i915</literal> (for Intel GMA 900, 950, 3100, or 3150 GPUs
             shipped with chipsets or Atom D/N 4xx/5xx CPUs)
          </para>
        </listitem>
        <listitem>
          <para>
             <literal>zink</literal> (uses Vulkan to implement OpenGL,
             and while unstable at times, it can be a decent replacement for
             non-performant gallium drivers like nouveau)
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      <parameter>-D vulkan-drivers=auto</parameter>: This parameter
      controls which Vulkan drivers should be built:

      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>auto</literal> selects all Vulkan drivers available
            for x86. With a comma-separated list, only a subset of these
            drivers will be built. If you precisely know which drivers you
            need, you can select them explicitly. For example,
            <option>-D vulkan-drivers=amd,nouveau,swrast</option>.
          </para>
        </listitem>

        <listitem>
          <para>
            <literal>amd</literal> (for AMD Radeon HD 7730 or newer AMD GPUs)
          </para>
        </listitem>

        <listitem>
          <para>
            <literal>intel</literal> (for Intel GPUs shipped with Skylake
            or newer CPUs, or as a dedicated PCIe card)
          </para>
        </listitem>

        <listitem>
          <para>
            <literal>intel_hasvk</literal> (for Intel GPUs shipped with
            Ivy Bridge, Haswell, or Broadwell CPUs)
          </para>
        </listitem>

        <listitem>
          <para>
            <literal>nouveau</literal> (for GTX 16XX, RTX 20XX, or
            newer NVIDIA GPUs)
          </para>
        </listitem>

        <listitem>
          <para>
            <literal>swrast</literal> (for using the CPU for 3D rasterization)
            Note that it's much slower than using a modern 3D-capable GPU,
            so it should be only used if the GPU is not supported by other
            drivers.
          </para>
        </listitem>

        <listitem>
          <para>
            <literal>""</literal> (empty list, use
            <option>-D vulkan-drivers=""</option> if you've not installed and
            you don't plan to install <xref linkend='vulkan-loader'/>)
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      <parameter>-D platforms=...</parameter>: This parameter
      controls which windowing systems will be supported. Available
      linux platforms are x11 and wayland.
    </para>

    <para>
      <parameter>-D valgrind=disabled</parameter>: This parameter disables
      the usage of Valgrind during the build process. Remove this parameter
      if you have Valgrind installed, and wish to check for memory leaks.
    </para>

    <para>
      <parameter>-D video-codecs=all</parameter>: This parameter enables
      building codecs for video formats covered by third-party patents.
    </para>

    <para>
      <parameter>-D libunwind=disabled</parameter>: This parameter disables
      the usage of libunwind.
    </para>

    <para>
      <command>meson configure -D build-tests=true</command>: This command will
      reconfigure the build to set <option>-D build-tests=true</option>, but
      keep the other options specified in the <command>meson setup</command>
      command unchanged.  It allows <command>ninja test</command> to build and
      run unit tests.
    </para>

    <para>
      <option>-D egl-native-platform="..."</option>: This parameter
      controls which Embedded Graphics Library support will be built. Available
      linux options are auto (default), x11, wayland, surfaceless, and drm.
    </para>

    <para>
      <option>-D legacy-x11="..."</option> This parameter controls which legacy
      X11 features get built-in support. Available linux options are none
      (default) and dri2. These features are rarely needed anymore.
    </para>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Libraries</segtitle><!-- in /usr/lib -->
      <segtitle>Installed DRI Driver Stubs</segtitle><!-- in /usr/lib/dri -->
      <segtitle>Installed VA-API Drivers</segtitle><!-- in /usr/lib/dri -->
      <segtitle>Installed GBM Backends</segtitle><!-- in /usr/lib/gbm -->
      <segtitle>Installed VDPAU Drivers</segtitle><!-- in /usr/lib/vdpau -->
      <segtitle>Installed Vulkan Drivers</segtitle><!-- in /usr/lib -->
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>
          glxgears,
          glxinfo,
          mme_fermi_sim_hw_test, and
          mme_tu104_sim_hw_test
        </seg>
        <seg>
          libEGL.so,
          libGL.so,
          libGLESv1_CM.so,
          libGLESv2.so,
          libgbm.so,
          libglapi.so,
          libgallium-&mesa-version;.so, and
          libxatracker.so
        </seg>
        <seg>
          <!-- Begin DRI driver stubs -->
          libdril_dri.so and symlinks to it:
          crocus_dri.so,
          i915_dri.so,
          iris_dri.so,
          kms_swrast_dri.so,
          nouveau_dri.so,
          r300_dri.so,
          r600_dri.so,
          r600_drv_video.so,
          radeonsi_dri.so,
          swrast_dri.so,
          virtio_gpu_dri.so,
          vmwgfx_dri.so, and
          zink_dri.so
          <!-- End DRI driver stubs -->
        </seg>
        <seg>
          <!-- Begin VA-API drivers -->
          nouveau_drv_video.so,
          radeonsi_drv_video.so, and
          virtio_gpu_drv_video.so,
          <!-- End VA-API drivers -->
        </seg>
        <seg>
          <!-- Begin GBM backends -->
          dri_gbm.so
          <!-- End GBM backends -->
        </seg>
        <seg>
          <!-- Begin VDPAU drivers -->
          libvdpau_nouveau.so,
          libvdpau_r600.so,
          libvdpau_radeonsi.so, and
          libvdpau_virtio_gpu.so
          <!-- End VDPAU drivers -->
          (Many of these drivers are hard-linked).
        </seg>
        <seg>
          libvulkan_intel_hasvk.so,
          libvulkan_intel.so,
          libvulkan_lvp.so,
          libvulkan_nouveau.so, and
          libvulkan_radeon.so
        </seg>
        <seg>
          <!-- $XORG_PREFIX/include/GL is installed by xorg-protos -->
          $XORG_PREFIX/{include/{EGL,GLES,GLES2,GLES3,KHR},
          $XORG_PREFIX/lib/{dri,gbm,vdpau}},
          $XORG_PREFIX/share/drirc.d (contains workarounds for various applications,
          particularly browsers and games),
          $XORG_PREFIX/share/vulkan,
          and /usr/share/doc/mesa-&mesa-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="glxgears">
        <term><command>glxgears</command></term>
        <listitem>
          <para>
            is a GL demo useful for troubleshooting graphics
            problems
          </para>
          <indexterm zone="mesa glxgears">
            <primary sortas="b-glxgears">glxgears</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="glxinfo">
        <term><command>glxinfo</command></term>
        <listitem>
          <para>
            is a diagnostic program that displays information about the
            graphics hardware and installed GL libraries
          </para>
          <indexterm zone="mesa glxinfo">
            <primary sortas="b-glxinfo">glxinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dri_gbm">
        <term><filename class='libraryfile'>dri_gbm.so</filename></term>
        <listitem>
          <para>
            implements Graphics Buffer Management functions needed by
            <systemitem class='library'>libgbm</systemitem> on top of
            <systemitem class='library'>libdrm</systemitem>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libdril_dri">
        <term><filename class='libraryfile'>libdril_dri.so</filename></term>
        <listitem>
          <para>
            is a stub allowing Xorg server to co-operate with the Gallium3D
            drivers
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libEGL">
        <term><filename class="libraryfile">libEGL.so</filename></term>
        <listitem>
          <para>
            provides a native platform graphics interface as
            defined by the EGL-1.4 specification
          </para>
          <indexterm zone="mesa libEGL">
            <primary sortas="c-libGL">libEGL.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgallium">
        <term><filename class='libraryfile'>libgallium-&mesa-version;.so</filename></term>
        <listitem>
          <para>
            contains all the Gallium3D drivers
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libgbm">
        <term><filename class="libraryfile">libgbm.so</filename></term>
        <listitem>
          <para>
            is the <application>Mesa</application> Graphics Buffer
            Manager library
          </para>
          <indexterm zone="mesa libgbm">
            <primary sortas="c-libgbm">libgbm.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libglapi">
        <term><filename class="libraryfile">libglapi.so</filename></term>
        <listitem>
          <para>
            is the <application>Mesa</application> implementation of the OpenGL
            API
          </para>
          <indexterm zone="mesa libglapi">
            <primary sortas="c-libglapi">libglapi.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLESv1_CM">
        <term><filename class="libraryfile">libGLESv1_CM.so</filename></term>
        <listitem>
          <para>
            is the <application>Mesa</application> OpenGL ES 1.1 library
          </para>
          <indexterm zone="mesa libGLESv1_CM">
            <primary sortas="c-libGLESv1_CM">libGLESv1_CM.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLES2">
        <term><filename class="libraryfile">libGLES2.so</filename></term>
        <listitem>
          <para>
            is the <application>Mesa</application> OpenGL ES 2.0 library
          </para>
          <indexterm zone="mesa libGLES2">
            <primary sortas="c-libGLES2">libGLES2.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGL">
        <term><filename class="libraryfile">libGL.so</filename></term>
        <listitem>
          <para>
            is the main <application>Mesa</application> OpenGL library
          </para>
          <indexterm zone="mesa libGL">
            <primary sortas="c-libGL">libGL.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libxatracker">
        <term><filename class="libraryfile">libxatracker.so</filename></term>
        <listitem>
          <para>
            is the XA state tracker for the VMWare vmwgfx driver
          </para>
          <indexterm zone="mesa libxatracker">
            <primary sortas="c-libxatracker">libxatracker.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
